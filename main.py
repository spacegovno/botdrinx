import os
import logging
import sqlite3
from datetime import datetime, timedelta
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = set(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class Database:
    def __init__(self):
        self.conn = sqlite3.connect("bot_database.db")
        self.create_table()

    def create_table(self):
        with self.conn:
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    language_code TEXT,
                    is_bot INTEGER,
                    date_joined TIMESTAMP
                )
            """)

    def add_user(self, user: types.User):
        try:
            with self.conn:
                self.conn.execute("""
                    INSERT INTO users (
                        user_id, username, first_name, last_name,
                        language_code, is_bot, date_joined
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    user.id,
                    user.username,
                    user.first_name,
                    user.last_name,
                    user.language_code,
                    user.is_bot,
                    datetime.now()
                ))
            return True
        except sqlite3.IntegrityError:
            return False

    def remove_user(self, user_id):
        with self.conn:
            cursor = self.conn.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
            return cursor.rowcount > 0

    def get_all_users(self):
        with self.conn:
            cursor = self.conn.execute("SELECT * FROM users")
            return cursor.fetchall()

    def get_new_users(self, days):
        with self.conn:
            cursor = self.conn.execute("""
                SELECT COUNT(*) FROM users WHERE date_joined >= ?
            """, (datetime.now() - timedelta(days=days),))
            return cursor.fetchone()[0]

    def export_to_csv(self):
        users = self.get_all_users()
        df = pd.DataFrame(users, columns=[
            "user_id", "username", "first_name",
            "last_name", "language_code", "is_bot", "date_joined"
        ])
        df.to_csv("database_export.csv", index=False)
        return "database_export.csv"

    def close(self):
        self.conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


class BroadcastState(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()


# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message(Command("help"))
async def cmd_help(message: Message):
    commands = get_available_commands(message.from_user.id in ADMIN_IDS)
    await message.answer(f"üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{commands}")


def get_available_commands(is_admin: bool) -> str:
    user_commands = """
üë§ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    admin_commands = """
üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/broadcast - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/viewdb - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/exportdb - –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """ if is_admin else ""

    return user_commands + admin_commands


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        if db.add_user(message.from_user):
            if message.from_user.id in ADMIN_IDS:
                text = "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ö–æ–º–∞–Ω–¥—ã: /help"
            else:
                text = "üì® –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø–∏—Å–∞—Ç—å—Å—è: /unsubscribe"
            await message.answer(text)
        else:
            await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!")
    except Exception as e:
        logger.error(f"/start error: {e}")
        await message.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message):
    if db.remove_user(message.from_user.id):
        await message.answer("‚ùå –û—Ç–ø–∏—Å–∞–ª–∏—Å—å")
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    total_users = db.get_all_users()
    total_count = len(total_users)
    new_users_day = db.get_new_users(1)
    new_users_week = db.get_new_users(7)
    new_users_month = db.get_new_users(30)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel
    stats = {
        "–î–∞—Ç–∞": [datetime.now().strftime("%Y-%m-%d")],
        "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": [total_count],
        "–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å": [new_users_day],
        "–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é": [new_users_week],
        "–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü": [new_users_month]
    }
    df = pd.DataFrame(stats)
    df.to_excel("stats.xlsx", index=False)

    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {new_users_day}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month}\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ stats.xlsx"
    )
    await message.answer_document(FSInputFile("stats.xlsx"))


# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–î
@dp.message(Command("viewdb"))
async def cmd_viewdb(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    users = db.get_all_users()
    response = "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
    for user in users:
        response += f"ID: {user[0]}, –ò–º—è: {user[2]}, –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[6]}\n"

    await message.answer(response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram


# –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î
@dp.message(Command("exportdb"))
async def cmd_exportdb(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    try:
        filename = db.export_to_csv()
        await message.answer_document(FSInputFile(filename))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ë–î: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã."
    )
    await state.set_state(BroadcastState.waiting_for_content)


@dp.message(BroadcastState.waiting_for_content, F.document | F.text)
async def process_broadcast_content(message: Message, state: FSMContext):
    await state.update_data(content=message.html_text, file_id=message.document.file_id if message.document else None)
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(BroadcastState.waiting_for_confirmation)


@dp.message(BroadcastState.waiting_for_confirmation, F.text.lower() == "–¥–∞")
async def confirm_broadcast(message: Message, state: FSMContext):
    data = await state.get_data()
    content = data.get("content")
    file_id = data.get("file_id")

    users = db.get_all_users()
    success, errors = 0, 0

    for user in users:
        try:
            if file_id:
                await bot.send_document(
                    chat_id=user[0],
                    document=file_id,
                    caption=content
                )
            else:
                await bot.send_message(
                    chat_id=user[0],
                    text=content
                )
            success += 1
        except Exception as e:
            errors += 1
            logger.error(f"Error to {user[0]}: {e}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"–û—à–∏–±–æ–∫: {errors}"
    )
    await state.clear()


@dp.message(BroadcastState.waiting_for_confirmation, F.text.lower() == "–Ω–µ—Ç")
async def cancel_broadcast(message: Message, state: FSMContext):
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text)  # –§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def unknown_command(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "/" (–∫–æ–º–∞–Ω–¥–∞)
    if message.text.startswith("/"):
        commands = get_available_commands(message.from_user.id in ADMIN_IDS)
        await message.answer(
            f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            f"{commands}"
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    db.close()


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())