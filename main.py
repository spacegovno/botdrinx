import os
import logging
import sqlite3
from datetime import datetime, timedelta
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = set(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else set()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

class Database:
    def __init__(self):
        self.conn = sqlite3.connect("bot_database.db")
        self.create_table()

    def create_table(self):
        with self.conn:
            self.conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    language_code TEXT,
                    is_bot INTEGER,
                    date_joined TIMESTAMP
                )
            """)

    def add_user(self, user: types.User):
        try:
            with self.conn:
                self.conn.execute("""
                    INSERT INTO users VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    user.id,
                    user.username,
                    user.first_name,
                    user.last_name,
                    user.language_code,
                    int(user.is_bot),
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ))
            return True
        except sqlite3.IntegrityError:
            return False

    def remove_user(self, user_id):
        with self.conn:
            cursor = self.conn.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
            return cursor.rowcount > 0

    def get_all_users(self):
        with self.conn:
            cursor = self.conn.execute("SELECT * FROM users")
            return cursor.fetchall()

    def get_new_users(self, days):
        with self.conn:
            cursor = self.conn.execute("""
                SELECT COUNT(*) FROM users WHERE date_joined >= ?
            """, (datetime.now() - timedelta(days=days),))
            return cursor.fetchone()[0]

    def export_to_csv(self):
        users = self.get_all_users()
        df = pd.DataFrame(users, columns=[
            "user_id", "username", "first_name",
            "last_name", "language_code", "is_bot", "date_joined"
        ])
        df.to_csv("database_export.csv", index=False)
        return "database_export.csv"

    def close(self):
        self.conn.close()

db = Database()

class BroadcastState(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirmation = State()

def get_available_commands(is_admin: bool) -> str:
    user_commands = """
<b>üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üîÑ/start - –ù–∞—á–∞—Ç—å –≤–∏–Ω–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ
üö´/unsubscribe - –í—ã–π—Ç–∏ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏
üó∫Ô∏è/location - –ù–∞–π—Ç–∏ –±—É—Ç–∏–∫ —Å –º–∞–≥–∏–µ–π –≤–∏–Ω
üõçÔ∏è/shop - –û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω
üìû/contacts - –°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–º–µ–ª—å–µ
üåê/social - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
üí°/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É
"""

    admin_commands = """
<b>üõ† –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/broadcast - –†–∞—Å—Å—ã–ª–∫–∞
/viewdb - –ü—Ä–æ—Å–º–æ—Ç—Ä –ë–î
/exportdb - –≠–∫—Å–ø–æ—Ä—Ç –ë–î
""" if is_admin else ""

    return user_commands + admin_commands

@dp.message(Command("help"))
async def cmd_help(message: Message):
    commands = get_available_commands(message.from_user.id in ADMIN_IDS)
    await message.answer(f"<b>üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n{commands}")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        if db.add_user(message.from_user):
            if message.from_user.id in ADMIN_IDS:
                text = "üëã <b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b> –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
            else:
                text = (
                    "üç∑ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Drinx!</b> –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –≤–∏–Ω–∞–º\n\n"
                    "‚ú® <b>–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                    "üî• –†–∞—Å—Å–∫–∞–∂—É –æ–± —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏—è—Ö‚Äî —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Å–∫–∏–¥–∫–∏, —Ä–µ–¥–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –¥–µ–≥—É—Å—Ç–∞—Ü–∏–∏\n\n"
                    "üó∫Ô∏è –ù–∞–π–¥–µ—Ç–µ –Ω–∞—Å –∑–∞ 60 —Å–µ–∫—É–Ω–¥ ‚Äî —Ä–∞—Å–∫—Ä–æ—é –∞–¥—Ä–µ—Å –±—É—Ç–∏–∫–∞ —Å –≤–æ–ª—à–µ–±–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π\n\n"
                    "üõçÔ∏è –û—Ç–∫—Ä–æ—é <a href='https://vrn.luding.ru/'>–æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω</a>\n\n"
                    "üë™üç∑ –ü–æ–∑–Ω–∞–∫–æ–º–ª—é —Å –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π —Å–µ–º—å–µ–π –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n\n"
                    "üìû –í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n\n"
                    "üí° –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –≤ –∫–æ–º–∞–Ω–¥–µ /help\n\n"
                    "<i>P.S. –•–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫? –°–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞—Å—Å–µ ¬´–°—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞üßÄ‚ú®¬ª "
                    "–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–Ω—É—é —Å–∫–∏–¥–∫—É!</i>"
                )
            await message.answer(text)
        else:
            await message.answer(
                f"üéâ <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!</b> üçá\n\n"
                "–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –≤–∏–Ω–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /help"
            )
    except Exception as e:
        logger.error(f"/start error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@dp.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message):
    if db.remove_user(message.from_user.id):
        await message.answer("‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b> –Ø –±—É–¥—É –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")

@dp.message(Command("location"))
async def cmd_location(message: Message):
    await message.answer(
        "<b>üìç –ù–∞—à –±—É—Ç–∏–∫:</b>\n\n"
        "üè† <u>–í–æ—Ä–æ–Ω–µ–∂</u>\n"
        "—É–ª. –ó–∞–≥–æ—Ä–æ–≤—Å–∫–æ–≥–æ, 7–∫4\n"
        "‚åö –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 11:00-23:00\n\n"
        
        "<a href='https://yandex.ru/maps/org/drinx/70384019199/?ll=39.185240%2C51.718339&z=16'>üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö</a>"
    )

@dp.message(Command("shop"))
async def cmd_shop(message: Message):
    await message.answer(
        "<b>üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Drinx</b>\n\n"
        "üéÅ 500+ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –≤–∏–Ω\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§ –∑–∞ 3-5 –¥–Ω–µ–π\n"
        "üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n\n"
        "<a href='https://vrn.luding.ru/'>üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω</a>"
    )

@dp.message(Command("contacts"))
async def cmd_contacts(message: Message):
    await message.answer(
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n"
        "‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (900) 299-91-94 WhatsApp/Telegram\n"
        "‚åö <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> 11:00-23:00\n\n"

    )

@dp.message(Command("social"))
async def cmd_social(message: Message):
    await message.answer(
        "<b>üåç –ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:</b>\n\n"
        "üì∏ <a href='https://www.instagram.com/drinx_vrn'>Instagram</a>\n"
        "üìò <a href='https://t.me/drinx_vrn'>Telegram</a>\n"

    )

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        return

    total_users = db.get_all_users()
    total_count = len(total_users)
    new_users_day = db.get_new_users(1)
    new_users_week = db.get_new_users(7)
    new_users_month = db.get_new_users(30)

    stats = {
        "–î–∞—Ç–∞": [datetime.now().strftime("%Y-%m-%d")],
        "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": [total_count],
        "–ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å": [new_users_day],
        "–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é": [new_users_week],
        "–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü": [new_users_month]
    }
    df = pd.DataFrame(stats)
    df.to_excel("stats.xlsx", index=False)

    await message.answer(
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üë§ –í—Å–µ–≥–æ: {total_count}\n"
        f"üÜï –ó–∞ –¥–µ–Ω—å: {new_users_day}\n"
        f"üÜï –ó–∞ –Ω–µ–¥–µ–ª—é: {new_users_week}\n"
        f"üÜï –ó–∞ –º–µ—Å—è—Ü: {new_users_month}"
    )
    await message.answer_document(FSInputFile("stats.xlsx"))

@dp.message(Command("viewdb"))
async def cmd_viewdb(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        return

    users = db.get_all_users()
    response = "<b>üìã –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
    for user in users:
        response += f"ID: {user[0]}, –ò–º—è: {user[2]}, –î–∞—Ç–∞: {user[6][:10]}\n"
    await message.answer(response[:4000])

@dp.message(Command("exportdb"))
async def cmd_exportdb(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        return

    try:
        filename = db.export_to_csv()
        await message.answer_document(FSInputFile(filename))
    except Exception as e:
        logger.error(f"Export error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>")
        return

    await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastState.waiting_for_content)

@dp.message(BroadcastState.waiting_for_content, F.document | F.text)
async def process_broadcast_content(message: Message, state: FSMContext):
    content = message.html_text
    file_id = message.document.file_id if message.document else None
    await state.update_data(content=content, file_id=file_id)
    await message.answer("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
    await state.set_state(BroadcastState.waiting_for_confirmation)

@dp.message(BroadcastState.waiting_for_confirmation, F.text.lower() == "–¥–∞")
async def confirm_broadcast(message: Message, state: FSMContext):
    data = await state.get_data()
    users = db.get_all_users()
    success, errors = 0, 0

    for user in users:
        try:
            if data['file_id']:
                await bot.send_document(user[0], data['file_id'], caption=data['content'])
            else:
                await bot.send_message(user[0], data['content'])
            success += 1
        except Exception as e:
            errors += 1
            logger.error(f"Error to {user[0]}: {e}")

    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {errors}")
    await state.clear()

@dp.message(BroadcastState.waiting_for_confirmation, F.text.lower() == "–Ω–µ—Ç")
async def cancel_broadcast(message: Message, state: FSMContext):
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.clear()

@dp.message(F.text)
async def unknown_command(message: Message):
    if message.text.startswith("/"):
        commands = get_available_commands(message.from_user.id in ADMIN_IDS)
        await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n{commands}")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    db.close()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())